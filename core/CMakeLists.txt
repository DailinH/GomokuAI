cmake_minimum_required (VERSION 3.8)

if(WIN32)
    set(_OS_NAME "Windows_NT")
    execute_process(COMMAND where vcpkg OUTPUT_VARIABLE VCPKG_EXEC) 
else()
    if(APPLE)
        set(_OS_NAME "MacOS")
    elseif(UNIX)
        set(_OS_NAME "Linux")
    endif()
    execute_process(COMMAND which vcpkg OUTPUT_VARIABLE VCPKG_EXEC)
endif()

# extract directory from vcpkg executable
get_filename_component(VCPKG_ROOT ${VCPKG_EXEC} DIRECTORY)

## This includes the vcpkg toolchain, must go before project definition
# It is a convenience so -DCMAKE_TOOLCHAIN_FILE=... is not needed. 
set(CMAKE_TOOLCHAIN_FILE ${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake)

# define the root solution
project(Core)

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(_PLATFORM "x64")
elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
    set(_PLATFORM "x86")
endif()

if(CMAKE_BUILD_TYPE EQUAL "Debug")
    set(_CONFIGURATION "Debug")
else() # RelWithDebInfo will fall into this scope
    set(_CONFIGURATION "Release")
endif()

# all project outputs are gathered in this configuration-dependent folder
set(OUTPUT_DIR ${CMAKE_SOURCE_DIR}/bin/${_OS_NAME}/${_PLATFORM}/${_CONFIGURATION})

# some c++17 features are used
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# pre-include Eigen3 and make use of ${PACKAGE_PREFIX_DIR} generated by it
find_package(Eigen3 CONFIG REQUIRED)

include_directories(${CMAKE_SOURCE_DIR}) # for General purpose
include_directories(${CMAKE_SOURCE_DIR}/lib/include) # for CoreLib headers
include_directories(${CMAKE_SOURCE_DIR}/lib/lib) # for manually-installed third-party libraries
include_directories(${PACKAGE_PREFIX_DIR}/include) # for vcpkg-installed third-party libraries

# add child projects
add_subdirectory(lib)
add_subdirectory(interface)
add_subdirectory(py_ext)
add_subdirectory(test)
